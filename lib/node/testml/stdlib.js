// Generated by CoffeeScript 2.3.0
(function() {
  var TestMLError;

  TestMLError = class TestMLError {
    constructor(msg) {
      this.msg = msg;
    }

  };

  module.exports = TestML.StdLib = class StdLib {
    constructor(run) {
      this.run = run;
    }

    add(x, y) {
      return x + y;
    }

    block(selector) {
      var block, i, len, ref;
      ref = this.run.data;
      for (i = 0, len = ref.length; i < len; i++) {
        block = ref[i];
        if (block.label === selector) {
          return block;
        }
      }
    }

    blocks() {
      return this.run.data;
    }

    bool(any) {
      return Boolean(any);
    }

    cat(...str) {
      return str.join('');
    }

    count(list) {
      return list.length;
    }

    error(error = '') {
      return new TestMLError(error);
    }

    env() {
      return this._env || (this._env = (function() {
        var env, key, ref, value;
        env = {};
        ref = process.env;
        for (key in ref) {
          value = ref[key];
          env[key] = value;
        }
        return env;
      })());
    }

    false() {
      return false;
    }

    flat(list, depth = 9999999999) {
      return _.flattenDepth(list, depth);
    }

    head(list) {}

    join(list, separator = ' ') {
      return _.join(list, separator);
    }

    lines(text) {
      text = text.replace(/\n$/, '');
      return text.split(/\n/);
    }

    null() {
      return null;
    }

    num(any) {
      return Number(any);
    }

    pairs(list) {
      return _.chunk(list, 2);
    }

    split(string, delim = /\s+/, limit = 9999999999) {
      return _.split(string, delim, limit);
    }

    str(any) {
      return String(any);
    }

    text(list) {
      return [...list, ''].join('\n');
    }

    throw(error = '') {
      throw error;
    }

    true() {
      return true;
    }

    type(value) {
      return this.run.get_type(this.run.cook(value));
    }

  };

}).call(this);
