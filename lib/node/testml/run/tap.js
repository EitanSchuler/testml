// Generated by CoffeeScript 2.3.1
(function() {
  require('../../testml/run');

  module.exports = TestML.Run.TAP = class TAP extends TestML.Run {
    static run(file) {
      (new this).from_file(file).test();
    }

    constructor(params = {}) {
      super(params);
      this.count = 0;
      ({output: this.output} = params);
      if (TestML.browser) {
        this.tap_output = '';
        this.out = function(text) {
          return this.tap_output += text + "\n";
        };
        this.err = function(text) {
          return this.tap_output += text + "\n";
        };
      } else {
        this.out = function(text) {
          return process.stdout.write(String(text) + "\n");
        };
        this.err = function(text) {
          return process.stderr.write(String(text) + "\n");
        };
      }
      return;
    }

    testml_begin() {
      this.checked = false;
      return this.planned = false;
    }

    testml_end() {
      if (!this.planned) {
        this.tap_done();
      }
      if (TestML.browser && this.tap_output) {
        this.output.value = this.tap_output;
      }
    }

    testml_eq(got, want, label) {
      var diff;
      this.check_plan();
      diff = _.isString(want) && want.match(/\n/) && (this.getv('Diff') || this.getp('DIFF'));
      return this.tap_is(got, want, label, diff);
    }

    testml_like(got, want, label) {
      this.check_plan();
      return this.tap_like(got, want, label);
    }

    testml_has(got, want, label) {
      this.check_plan();
      return this.tap_has(got, want, label);
    }

    testml_list_has(got, want, label) {
      this.check_plan();
      return this.tap_list_has(got, want, label);
    }

    check_plan() {
      var plan;
      if (this.checked) {
        return;
      }
      this.checked = true;
      if (plan = this.vars.Plan) {
        this.planned = true;
        return this.tap_plan(plan);
      }
    }

    tap_plan(plan) {
      return this.out(`1..${plan}`);
    }

    tap_pass(label) {
      if (label) {
        label = ' - ' + label;
      }
      return this.out(`ok ${++this.count}${label}`);
    }

    tap_fail(label) {
      if (label) {
        label = ' - ' + label;
      }
      return this.out(`not ok ${++this.count}${label}`);
    }

    tap_ok(ok, label) {
      if (ok) {
        return this.tap_pass(label);
      } else {
        return this.tap_fail(label);
      }
    }

    tap_is(got, want, label, diff) {
      if (got === want) {
        return this.tap_pass(label);
      } else {
        this.tap_fail(label);
        if (diff) {
          if (!TestML.browser) {
            global.JsDiff = require('diff');
          }
          this.tap_fail(label);
          return this.tap_diag(JsDiff.createTwoFilesPatch('want', 'got', want, got, '', '', {
            context: 3
          }));
        } else {
          return this.show('         got:', got, '    expected:', want, label);
        }
      }
    }

    tap_like(got, want, label) {
      if (got.match(want)) {
        return this.tap_pass(label);
      } else {
        this.tap_fail(label);
        return this.show('                 ', got, "    doesn't match", want, label);
      }
    }

    tap_has(got, want, label) {
      if (got.indexOf(want) !== -1) {
        return this.tap_pass(label);
      } else {
        this.tap_fail(label);
        return this.show('     this string:', got, " doesn't contain:", want, label);
      }
    }

    tap_list_has(got, want, label) {
      var json;
      if ((_.findIndex(got, function(str) {
        return str === want;
      })) !== -1) {
        return this.tap_pass(label);
      } else {
        this.tap_fail(label);
        json = JSON.stringify(got, null, 2);
        return this.show('      this array:', json, " doesn't contain:", want, label);
      }
    }

    tap_note(msg) {
      return this.out(msg.replace(/^/mg, '# '));
    }

    tap_diag(msg) {
      return this.err(msg.replace(/^/mg, '# '));
    }

    tap_done() {
      return this.out(`1..${this.count}`);
    }

    show(got_prefix, got, want_prefix, want, label) {
      if (label) {
        this.err(`#   Failed test '${label}'`);
      } else {
        this.err("#   Failed test");
      }
      if (_.isString(got)) {
        got = `'${got}'`;
      }
      this.tap_diag(`${got_prefix} ${got}`);
      if (_.isString(want)) {
        want = `'${want}'`;
      }
      return this.tap_diag(`${want_prefix} ${want}`);
    }

  };

}).call(this);
