// Generated by CoffeeScript 2.3.1
(function() {
  require('../../testml/run');

  module.exports = TestML.Run.Mocha = class Mocha extends TestML.Run {
    static run(file) {
      (new this).from_file(file).test();
    }

    constructor(params = {}) {
      super(params);
      this.browser = TestML.browser;
      if (this.browser) {
        this.assert = chai.assert;
        this.tests = [];
      }
      return;
    }

    testml_begin() {
      if (this.browser) {
        $('#mocha').html('');
        // Hack to reset Mocha internals, needed after first run.
        // https://github.com/mochajs/mocha/issues/2706#issuecomment-383233213
        mocha.suite = mocha.suite.clone();
        mocha.suite.ctx = new window.Mocha.Context();
        return mocha.ui("bdd");
      }
    }

    testml_end() {
      var run;
      if (this.browser) {
        run = function({got, want, label, assertion}) {
          return it(label, function() {
            return chai.assert[assertion](got, want, label);
          });
        };
        describe('', () => {
          var i, len, ref, results, test;
          ref = this.tests;
          results = [];
          for (i = 0, len = ref.length; i < len; i++) {
            test = ref[i];
            results.push(run(test));
          }
          return results;
        });
        return mocha.run();
      }
    }

    testml_eq(got, want, label) {
      if (this.browser) {
        return this.tests.push({
          got,
          want,
          label,
          assertion: 'equal'
        });
      }
    }

    testml_like(got, want, label) {
      if (this.browser) {
        want = new RegExp(want);
        return this.tests.push({
          got,
          want,
          label,
          assertion: 'match'
        });
      }
    }

    testml_has(got, want, label) {
      if (this.browser) {
        return this.tests.push({
          got,
          want,
          label,
          assertion: 'include'
        });
      }
    }

    testml_list_has(got, want, label) {
      if (this.browser) {
        return this.tests.push({
          got,
          want,
          label,
          assertion: 'include'
        });
      }
    }

  };

}).call(this);
