// Generated by CoffeeScript 2.3.0
(function() {
  TestML.TAP = class TAP {
    constructor() {
      this.count = 0;
      if (TestML.browser) {
        this.output = '';
        this.out = function(text) {
          return this.output += text + "\n";
        };
        this.err = function(text) {
          return this.output += text + "\n";
        };
      } else {
        this.out = function(text) {
          return process.stdout.write(String(text) + "\n");
        };
        this.err = function(text) {
          return process.stderr.write(String(text) + "\n");
        };
      }
    }

    plan(plan) {
      return this.out(`1..${plan}`);
    }

    pass(label) {
      if (label) {
        label = ' - ' + label;
      }
      return this.out(`ok ${++this.count}${label}`);
    }

    fail(label) {
      if (label) {
        label = ' - ' + label;
      }
      return this.out(`not ok ${++this.count}${label}`);
    }

    ok(ok, label) {
      if (ok) {
        return this.pass(label);
      } else {
        return this.fail(label);
      }
    }

    is_eq(got, want, label, diff) {
      if (got === want) {
        return this.pass(label);
      } else {
        this.fail(label);
        if (diff) {
          if (!TestML.browser) {
            global.JsDiff = require('diff');
          }
          this.fail(label);
          return this.diag(JsDiff.createTwoFilesPatch('want', 'got', want, got, '', '', {
            context: 3
          }));
        } else {
          return this.show('         got:', got, '    expected:', want, label);
        }
      }
    }

    like(got, want, label) {
      if (got.match(new RegExp(want))) {
        return this.pass(label);
      } else {
        this.fail(label);
        return this.show('                 ', got, "    doesn't match", want, label);
      }
    }

    has(got, want, label) {
      if (got.indexOf(want) !== -1) {
        return this.pass(label);
      } else {
        this.fail(label);
        return this.show('     this string:', got, " doesn't contain:", want, label);
      }
    }

    list_has(got, want, label) {
      var json;
      if ((_.findIndex(got, function(str) {
        return str === want;
      })) !== -1) {
        return this.pass(label);
      } else {
        this.fail(label);
        json = JSON.stringify(got, null, 2);
        return this.show('      this array:', json, " doesn't contain:", want, label);
      }
    }

    note(msg) {
      return this.out(msg.replace(/^/mg, '# '));
    }

    diag(msg) {
      return this.err(msg.replace(/^/mg, '# '));
    }

    done_testing() {
      return this.out(`1..${this.count}`);
    }

    show(got_prefix, got, want_prefix, want, label) {
      if (label) {
        this.err(`#   Failed test '${label}'`);
      } else {
        this.err("#   Failed test");
      }
      if (_.isString(got)) {
        got = `'${got}'`;
      }
      this.diag(`${got_prefix} ${got}`);
      if (_.isString(want)) {
        want = `'${want}'`;
      }
      return this.diag(`${want_prefix} ${want}`);
    }

  };

}).call(this);
