// Generated by CoffeeScript 2.3.0
(function() {
  TestML.TAP = class TAP {
    constructor() {
      this.count = 0;
      if (TestML.browser) {
        this.output = '';
        this.out = function(text) {
          return this.output += text + "\n";
        };
        this.err = function(text) {
          return this.output += text + "\n";
        };
      } else {
        this.out = function(text) {
          return process.stdout.write(String(text) + "\n");
        };
        this.err = function(text) {
          return process.stderr.write(String(text) + "\n");
        };
      }
    }

    pass(label) {
      return this.out(`ok ${++this.count} - ${label}`);
    }

    fail(label) {
      return this.out(`not ok ${++this.count} - ${label}`);
    }

    ok(ok, label) {
      if (ok) {
        return this.pass(label);
      } else {
        return this.fail(label);
      }
    }

    is_eq(got, want, label) {
      if (got === want) {
        return this.pass(label);
      } else {
        this.fail(label);
        if (label) {
          this.err(`#   Failed test '${label}'`);
        } else {
          this.err("#   Failed test");
        }
        if (_.isString(got)) {
          got = got.replace(/^/mg, '# ');
          got = got.replace(/^\#\ /, '');
          got = got.replace(/\n$/, "\n# ");
          got = `'${got}'`;
        }
        this.err(`#          got: ${got}`);
        if (_.isString(want)) {
          want = want.replace(/^/mg, '# ');
          want = want.replace(/^\#\ /, '');
          want = want.replace(/\n$/, "\n# ");
          want = `'${want}'`;
        }
        return this.err(`#     expected: ${want}`);
      }
    }

    diag(msg) {
      return this.err(msg.replace(/^/mg, '# '));
    }

    done_testing() {
      return this.out(`1..${this.count}`);
    }

  };

  // vim: ft=coffee sw=2:

}).call(this);
