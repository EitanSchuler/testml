#!/usr/bin/env bash

set -e

main() {
  testml_root="$(cd "$(dirname "$0")/.." && pwd)"
  export testml_root

  if is-tty; then
    # shellcheck disable=SC1090
    source "$testml_root/testml-cli"
    testml-run-cli "$@"
    exit $?
  fi

  set-testml-bin

  set-input-vars "$@"

  exec "$TESTML_BIN" "$@"
}

testml-run() {
  compile-testml "$@"

  # shellcheck disable=SC2154
  testml-run-file "$TESTML_EXEC_PATH"
}

set-testml-bin() {
  if [[ -n $TESTML_BIN ]]; then
    can "$TESTML_BIN" ||
      die "TESTML_BIN=$TESTML_BIN but '$TESTML_BIN' not found"
    export TESTML_BIN
    return 0
  fi

  if [[ -n $TESTML_LANG ]]; then
    TESTML_BIN="testml-$TESTML_LANG"
    can "$TESTML_BIN" ||
      die "TESTML_LANG=$TESTML_LANG but '$TESTML_BIN' not found"
    export TESTML_LANG
    export TESTML_BIN
    return 0
  fi

  die "
Can't determine TestML binary to use.
Try setting TESTML_LANG or TESTML_BIN.
"
}

set-input-vars() {
  export TESTML_INPUT=$1
  TESTML_INPUT_DIR=$(cd "$(dirname "$TESTML_INPUT")" && pwd)
  export TESTML_INPUT_DIR
  TESTML_INPUT_FILE=$(basename "$TESTML_INPUT")
  export TESTML_INPUT_FILE
  export TESTML_INPUT_PATH="$TESTML_INPUT_DIR/$TESTML_INPUT_FILE"
  export TESTML_CACHE="$TESTML_INPUT_DIR/.testml"
  export TESTML_EXEC_PATH="$TESTML_CACHE/$TESTML_INPUT_FILE.json"
}

compile-testml() {
  [[ -e $TESTML_EXEC_PATH && ! -s $TESTML_EXEC_PATH ]] &&
    rm -f "$TESTML_EXEC_PATH"
  [[ $TESTML_EXEC_PATH -nt $TESTML_INPUT_PATH ]] &&
    return 0

  mkdir -p "$TESTML_CACHE"

  testml-compiler "$TESTML_INPUT_PATH" > "$TESTML_EXEC_PATH" || {
    local rc=$?
    rm -f "$TESTML_EXEC_PATH"
    return "$rc"
  }
}

is-tty() {
  [[ -t 0 && -t 1 ]]
}

can() {
  type "$1" >/dev/null
}

die() {
  echo "Died: $*" >&2
  exit 1
}

[[ $0 != "${BASH_SOURCE[0]}" ]] || main "$@"

# vim: ft=sh sw=2 lisp:
